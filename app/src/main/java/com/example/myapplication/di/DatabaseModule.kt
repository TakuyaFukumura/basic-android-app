package com.example.myapplication.di

import android.content.Context
import androidx.room.Room
import com.example.myapplication.data.dao.StringDao
import com.example.myapplication.data.database.AppDatabase
import com.example.myapplication.data.repository.StringRepository
import dagger.Module
import dagger.Provides
import dagger.hilt.InstallIn
import dagger.hilt.android.qualifiers.ApplicationContext
import dagger.hilt.components.SingletonComponent
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.SupervisorJob
import javax.inject.Singleton

/**
 * Hilt module for providing database-related dependencies
 *
 * This module provides all database-related dependencies including:
 * - AppDatabase instance (Room database)
 * - StringDao (Room-generated DAO implementation)
 * - StringRepository (repository pattern implementation)
 *
 * All dependencies are provided as singletons to ensure:
 * - Single database instance throughout the app
 * - Efficient resource usage
 * - Data consistency
 */
@Module
@InstallIn(SingletonComponent::class)
object DatabaseModule {

    /**
     * Provides the main application database instance
     *
     * Creates a Room database instance with proper configuration:
     * - Uses application context to avoid memory leaks
     * - Singleton scope for app-wide sharing
     * - Includes callback for initial data setup
     *
     * @param context Application context for database creation
     * @return AppDatabase instance for the entire application
     */
    @Provides
    @Singleton
    fun provideAppDatabase(@ApplicationContext context: Context): AppDatabase {
        // Create a coroutine scope for database initialization
        val scope = CoroutineScope(SupervisorJob() + Dispatchers.IO)
        
        return AppDatabase.getDatabase(context, scope)
    }

    /**
     * Provides StringDao implementation
     *
     * Room automatically generates the DAO implementation.
     * This method extracts the DAO from the database instance.
     *
     * @param database The Room database instance
     * @return StringDao implementation generated by Room
     */
    @Provides
    fun provideStringDao(database: AppDatabase): StringDao {
        return database.stringDao()
    }

    /**
     * Provides StringRepository instance
     *
     * Creates the repository that acts as an intermediary between
     * ViewModel and DAO, implementing the repository pattern.
     *
     * @param stringDao The Room-generated StringDao implementation
     * @return StringRepository for data access operations
     */
    @Provides
    fun provideStringRepository(stringDao: StringDao): StringRepository {
        return StringRepository(stringDao)
    }
}